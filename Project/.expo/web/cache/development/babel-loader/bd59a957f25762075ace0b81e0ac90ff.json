{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/derekbitch/Documents/Programming/LocalProjects/Zwijnsberg/Z1_Vocab/Project/screens/HomeScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { List } from \"react-native-web/dist/index\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { MonoText } from \"../components/StyledText\";\nimport GradientButton from 'react-native-gradient-buttons';\nimport TabBarIcon from \"../components/TabBarIcon\";\nimport GamesScreen from \"../screens/GamesScreen\";\nimport ConnectScreen from \"../screens/ConnectScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport ListItem from \"../components/ListItem\";\nimport PropTypes from 'prop-types';\n\nvar HomeScreen = function (_React$Component) {\n  _inherits(HomeScreen, _React$Component);\n\n  var _super = _createSuper(HomeScreen);\n\n  function HomeScreen(props) {\n    var _this;\n\n    _classCallCheck(this, HomeScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      listInput: '',\n      lists: [{\n        id: 0,\n        title: '',\n        gb: \"#FFFFFF\",\n        ge: \"#FFFFFF\"\n      }]\n    };\n    _this.state = {\n      listInput: '',\n      lists: [{\n        id: 0,\n        title: 'music',\n        gb: \"#FFFFFF\",\n        ge: \"#FFFFFF\"\n      }, {\n        id: 1,\n        title: 'bruh',\n        gb: \"#FFFFFF\",\n        ge: \"#FFFFFF\"\n      }, {\n        id: 2,\n        title: \"chicken\",\n        gb: \"#FFFFFF\",\n        ge: \"#FFFFFF\"\n      }, {\n        id: 3,\n        title: 'chow',\n        gb: \"#FFFFFF\",\n        ge: \"#FFFFFF\"\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(HomeScreen, [{\n    key: \"addNewList\",\n    value: function addNewList() {\n      var lists = this.state.lists;\n      lists.unshift({\n        id: todos.length + 1,\n        title: this.state.listInput\n      });\n      this.setState({\n        lists: lists,\n        listInput: ' '\n      });\n    }\n  }, {\n    key: \"removeTodo\",\n    value: function removeTodo(item) {\n      var lists = this.state.lists;\n      lists = lists.filter(function (list) {\n        return list.id !== item.id;\n      });\n      this.setState({\n        lists: lists\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var navigation = this.props.navigation;\n      return React.createElement(ScrollView, {\n        style: styles.container,\n        contentContainerStyle: styles.contentContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 5\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row',\n          justifyContent: 'space-evenly',\n          alignItems: 'center',\n          marginVertical: 24\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 5\n        }\n      }, React.createElement(FlatList, {\n        data: this.state.lists,\n        extraData: this.state,\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        },\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item,\n              index = _ref.index;\n          return React.createElement(ListItem, {\n            ListItem: item,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 5\n        }\n      })), React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row',\n          justifyContent: 'space-evenly',\n          alignItems: 'center',\n          marginVertical: 280\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 3\n        }\n      }, React.createElement(Image, {\n        source: require(\"./../images/datBird.gif\"),\n        style: {\n          width: 100,\n          height: 100\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 5\n        }\n      })));\n    }\n  }]);\n\n  return HomeScreen;\n}(React.Component);\n\nexport { HomeScreen as default };\nHomeScreen.navigationOptions = {\n  header: null\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"sources":["/Users/derekbitch/Documents/Programming/LocalProjects/Zwijnsberg/Z1_Vocab/Project/screens/HomeScreen.js"],"names":["React","Component","List","ScrollView","MonoText","GradientButton","TabBarIcon","GamesScreen","ConnectScreen","SettingsScreen","ListItem","PropTypes","HomeScreen","props","state","listInput","lists","id","title","gb","ge","unshift","todos","length","setState","item","filter","list","navigation","styles","container","contentContainer","flex","flexDirection","justifyContent","alignItems","marginVertical","index","toString","require","width","height","navigationOptions","header","StyleSheet","create","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Image, Button, Platform, StyleSheet, FlatList, List,Text, TouchableOpacity, View } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { MonoText } from '../components/StyledText';\nimport GradientButton from 'react-native-gradient-buttons';\nimport TabBarIcon from '../components/TabBarIcon';\nimport GamesScreen from '../screens/GamesScreen';\nimport ConnectScreen from '../screens/ConnectScreen';\nimport SettingsScreen from '../screens/SettingsScreen';\nimport ListItem from '../components/ListItem';\nimport PropTypes from 'prop-types';\n//import { useNavigation } from '@react-navigation/native';\n\n\n//now we need to see how we call the right functions to add a listItem to the list\n// and we need to figure out how to place the generated listItem into the return function in here\n\n//export default function HomeScreen({navigation}) {\nexport default class HomeScreen extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      listInput: '',\n      lists: [\n        { id: 0, title: '', gb: \"#FFFFFF\", ge: \"#FFFFFF\"},\n      ]\n    }\n\n    this.state = {\n      listInput: '',\n      lists: [\n        { id: 0, title: 'music', gb: \"#FFFFFF\", ge: \"#FFFFFF\"}, \n        { id: 1, title: 'bruh', gb: \"#FFFFFF\", ge: \"#FFFFFF\"},\n        { id: 2, title: \"chicken\", gb: \"#FFFFFF\", ge: \"#FFFFFF\"}, \n        { id: 3, title: 'chow', gb: \"#FFFFFF\", ge: \"#FFFFFF\"},\n      ]\n    }\n\n  }\n\n  addNewList () {\n    let lists = this.state.lists;\n\n    lists.unshift({\n      id: todos.length + 1,\n      title: this.state.listInput,\n    });\n\n    this.setState({\n      lists: lists,\n      listInput: ' '\n    });\n  }\n\n\n  removeTodo (item) {\n    let lists = this.state.lists;\n\n    lists = lists.filter((list) => list.id !== item.id);\n\n    this.setState({lists});\n  }\n\n  render(){\n\n  const { navigation } = this.props;\n\n    /*\n    TO GET THE SCREEN FULLY WORKING AGAIN PUT IN THE OLD EXPORT DEFAULT, THEN  REMOVE CONSTRUCTOR () {..}\n    AND REMOVE THE RENDER THING AND TAKE THE ENTIRE RETURN() OUT OF IT\n    \n    */\n  \n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n    <View style={{flex: 1, flexDirection: 'row', justifyContent: 'space-evenly', alignItems: 'center', marginVertical: 24}}> \n\n    <FlatList\n            data={this.state.lists}\n            extraData={this.state}\n            keyExtractor={(item, index) => index.toString()}\n            renderItem={({item, index}) => {\n              return (\n                <ListItem ListItem={item}/>  \n              )\n            }}\n          />\n\n    \n\n  </View>\n\n  <View style={{flex: 1, flexDirection: 'row', justifyContent: 'space-evenly', alignItems: 'center', marginVertical: 280}}>\n    <Image \n        source={require('./../images/datBird.gif')}  \n        style={{width: 100, height: 100 }}\n    />\n  </View>\n  </ScrollView>\n  );\n  }\n}\n\n/*\n\nthe following can be used to present a created list into the view through a flatlist:\n    \n      <List>\n          <FlatList\n            data={lists}\n            renderItem={this.renderRow}\n            keyExtractor={item => item.title}\n          />\n      </List>\n\n\nfunction addNewList () {\n    let lists = this.state.lists;\n\n    lists.unshift({\n      id: lists.length + 1,\n      title: \"cow\", //this may have to be single quote\n    });\n\n    this.setState({\n      lists: lists,\n      title: \"cow\",\n    });\n  }\n\n\nfunction toggleDone (item) {\n    let lists = this.state.lists;\n\n    lists = lists.map((list) => {\n      if (list.id == list.id) {\n        list.done = !list.done;\n      }\n      return list;\n    })\n\n    this.setState({lists});\n  }\n\nfunction removeList (item) {\n    let lists = this.state.lists;\n\n    lists = lists.filter((list) => list.id !== item.id);\n\n    this.setState({lists});\n  }\n\n\n    <ListItem listItem={item} toggleDone={() => toggleDone(item)} removeTodo={() => removeTodo(item)}/>\n  export default function HomeScreen({navigation}) {\n    export const object = {\n      name: 'joe',\n      age: 27,\n      country: 'France'\n  }\n\n// put the functions here, make sure they are put here correctly\n// implement them \n// create a seperate component for the button item which will be created\n\n\nthis.state = {\n      listInput: '',\n      lists: [\n        { id: 0, title: ' '}\n      ]\n    }\n\nfunction addNewList () {\n    let lists = this.state.lists;\n\n    todos.unshift({\n      id: todos.length + 1,\n      title: this.state.listInput,\n    });\n\n    this.setState({\n      lists: lists,\n      listInput: ''\n    });\n  }\n\n\nfunction toggleDone (item) {\n    let lists = this.state.lists;\n\n    lists = lists.map((list) => {\n      if (list.id == list.id) {\n        list.done = !list.done;\n      }\n\n      return list;\n    })\n\n    this.setState({lists});\n  }\n\nfunction removeList (item) {\n    let lists = this.state.lists;\n\n    lists = lists.filter((todo) => todo.id !== item.id);\n\n    this.setState({lists});\n  }\n\n  */\n\n\n\nHomeScreen.navigationOptions = {\n  header: null,\n};\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}