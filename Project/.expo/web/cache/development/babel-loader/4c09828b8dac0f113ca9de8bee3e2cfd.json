{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoHaptics from \"./ExpoHaptics\";\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from \"./Haptics.types\";\nexport function notification() {\n  var type,\n      _args = arguments;\n  return _regeneratorRuntime.async(function notification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          type = _args.length > 0 && _args[0] !== undefined ? _args[0] : NotificationFeedbackType.Success;\n          console.warn('`Haptics.notification` is deprecated. Use `Haptics.notificationAsync` instead.');\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(notificationAsync(type));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function impact() {\n  var style,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function impact$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          style = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : ImpactFeedbackStyle.Medium;\n          console.warn('`Haptics.impact` is deprecated. Use `Haptics.impactAsync` instead.');\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(impactAsync(style));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function selection() {\n  return _regeneratorRuntime.async(function selection$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.warn('`Haptics.selection` is deprecated. Use `Haptics.selectionAsync` instead.');\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(selectionAsync());\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function notificationAsync() {\n  var type,\n      _args4 = arguments;\n  return _regeneratorRuntime.async(function notificationAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          type = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : NotificationFeedbackType.Success;\n\n          if (ExpoHaptics.notificationAsync) {\n            _context4.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Haptics', 'notificationAsync');\n\n        case 3:\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(ExpoHaptics.notificationAsync(type));\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function impactAsync() {\n  var style,\n      _args5 = arguments;\n  return _regeneratorRuntime.async(function impactAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          style = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : ImpactFeedbackStyle.Medium;\n\n          if (ExpoHaptics.impactAsync) {\n            _context5.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Haptic', 'impactAsync');\n\n        case 3:\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(ExpoHaptics.impactAsync(style));\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function selectionAsync() {\n  return _regeneratorRuntime.async(function selectionAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (ExpoHaptics.selectionAsync) {\n            _context6.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Haptic', 'selectionAsync');\n\n        case 2:\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(ExpoHaptics.selectionAsync());\n\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport { NotificationFeedbackType, ImpactFeedbackStyle };","map":{"version":3,"sources":["../src/Haptics.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAEA,OAAO,WAAP;AACA,SAAS,wBAAT,EAAmC,mBAAnC;AAEA,OAAO,SAAe,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B,UAAA,IAA5B,2DAA6D,wBAAwB,CAAC,OAAtF;AACL,UAAA,OAAO,CAAC,IAAR,CAAa,gFAAb;AADK;AAAA,2CAEC,iBAAiB,CAAC,IAAD,CAFlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,OAAO,SAAe,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsB,UAAA,KAAtB,8DAAmD,mBAAmB,CAAC,MAAvE;AACL,UAAA,OAAO,CAAC,IAAR,CAAa,oEAAb;AADK;AAAA,2CAEC,WAAW,CAAC,KAAD,CAFZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,OAAO,SAAe,SAAf;AAAA;AAAA;AAAA;AAAA;AACL,UAAA,OAAO,CAAC,IAAR,CAAa,0EAAb;AADK;AAAA,2CAEC,cAAc,EAFf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQP,OAAO,SAAe,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC,UAAA,IAAjC,8DAAkE,wBAAwB,CAAC,OAA3F;;AAAA,cACA,WAAW,CAAC,iBADZ;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,SAAxB,EAAmC,mBAAnC,CAFH;;AAAA;AAAA;AAAA,2CAIC,WAAW,CAAC,iBAAZ,CAA8B,IAA9B,CAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAe,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B,UAAA,KAA3B,8DAAwD,mBAAmB,CAAC,MAA5E;;AAAA,cACA,WAAW,CAAC,WADZ;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,QAAxB,EAAkC,aAAlC,CAFH;;AAAA;AAAA;AAAA,2CAIC,WAAW,CAAC,WAAZ,CAAwB,KAAxB,CAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAe,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,WAAW,CAAC,cADZ;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,QAAxB,EAAkC,gBAAlC,CAFH;;AAAA;AAAA;AAAA,2CAIC,WAAW,CAAC,cAAZ,EAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,SAAS,wBAAT,EAAmC,mBAAnC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\nexport async function notification(type: NotificationFeedbackType = NotificationFeedbackType.Success): Promise<void> {\n  console.warn('`Haptics.notification` is deprecated. Use `Haptics.notificationAsync` instead.');\n  await notificationAsync(type);\n}\n\nexport async function impact(style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium): Promise<void> {\n  console.warn('`Haptics.impact` is deprecated. Use `Haptics.impactAsync` instead.');\n  await impactAsync(style);\n}\n\nexport async function selection(): Promise<void> {\n  console.warn('`Haptics.selection` is deprecated. Use `Haptics.selectionAsync` instead.');\n  await selectionAsync();\n}\n\n/**\n * Triggers notification feedback.\n */\nexport async function notificationAsync(type: NotificationFeedbackType = NotificationFeedbackType.Success): Promise<void> {\n  if (!ExpoHaptics.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n/**\n * Triggers impact feedback.\n */\nexport async function impactAsync(style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium): Promise<void> {\n  if (!ExpoHaptics.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n/**\n * Triggers selection feedback.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}